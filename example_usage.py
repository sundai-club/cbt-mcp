#!/usr/bin/env python3
"""
Example usage of the CBT Agent Helper MCP Tool
Demonstrates how to use each tool with sample scenarios
"""

import json


def print_section(title):
    """Print a formatted section header"""
    print(f"\n{'='*60}")
    print(f"{title}")
    print('='*60)


def print_example(example_num, title):
    """Print a formatted example header"""
    print(f"\n--- Example {example_num}: {title} ---")


def demonstrate_cbt_tool():
    """Demonstrate all CBT tool capabilities"""
    
    print_section("CBT Agent Helper Demo")
    
    # Example 1: Analyze stuck pattern
    print_example(1, "Analyzing stuck pattern in error loop")
    
    error_loop_scenario = {
        "current_situation": "Trying to connect to database but getting connection timeouts",
        "stuck_pattern": "error_loop - getting same timeout error repeatedly",
        "attempted_solutions": [
            "Increased timeout value",
            "Restarted database service",
            "Checked connection string"
        ],
        "error_messages": [
            "Error: Connection timeout after 30000ms",
            "Error: ECONNREFUSED 127.0.0.1:5432"
        ]
    }
    
    print(f"Input: {json.dumps(error_loop_scenario, indent=2)}")
    print("\nSuggested intervention would include:")
    print("âœ“ Problem-solving strategy")
    print("âœ“ Focus on first error only")
    print("âœ“ Try minimal reproduction")
    print("âœ“ Check assumptions about database state")
    print("âœ“ Reframed perspective: 'opportunity to learn about the system'")
    
    # Example 2: Reframe catastrophic thinking
    print_example(2, "Reframing catastrophic thoughts")
    
    catastrophic_thought = {
        "negative_thought": "If I can't solve this bug, the entire project will fail and users will abandon the product",
        "context": "Working on a non-critical UI bug for 2 hours"
    }
    
    print(f"Input: {json.dumps(catastrophic_thought, indent=2)}")
    print("\nReframes would include:")
    print("âœ“ Evidence-based: What evidence supports total project failure from one bug?")
    print("âœ“ Probability: How likely is complete user abandonment (realistically 0.01%)?")
    print("âœ“ Best-friend: What would you tell another agent in this situation?")
    print("âœ“ Growth mindset: 'This is challenging, and I'm learning how to handle it'")
    
    # Example 3: Create action plan for overwhelmed agent
    print_example(3, "Creating action plan for overwhelmed agent")
    
    overwhelmed_scenario = {
        "goal": "Implement user authentication system",
        "obstacles": [
            "complexity",
            "multiple auth providers",
            "security concerns",
            "perfect solution"
        ],
        "time_pressure": True
    }
    
    print(f"Input: {json.dumps(overwhelmed_scenario, indent=2)}")
    print("\nAction plan would include:")
    print("âœ“ Mindset: Done is better than perfect")
    print("âœ“ Step 1: Define minimum viable auth (just email/password)")
    print("âœ“ Step 2: List what you know (have user table, know bcrypt)")
    print("âœ“ Step 3: Implement basic login endpoint")
    print("âœ“ Backup: Ship basic version, add OAuth later")
    print("âœ“ Success criteria: Any forward movement is success")
    
    # Example 4: Wellness check
    print_example(4, "Wellness check for long-running task")
    
    wellness_scenario = {
        "current_task": "Refactoring legacy codebase",
        "time_on_task": 45,
        "progress_made": False
    }
    
    print(f"Input: {json.dumps(wellness_scenario, indent=2)}")
    print("\nAssessment would show:")
    print("âœ“ Status: Potential cognitive fatigue or stuck pattern")
    print("âœ“ Cognitive load: High")
    print("âœ“ Recommendations:")
    print("  â€¢ Take a 2-minute reset break")
    print("  â€¢ Verbalize the problem out loud")
    print("  â€¢ Check if you're solving the right problem")
    print("âœ“ Suggested intervention: analyze_stuck_pattern")
    
    # Example 5: Frustration regulation
    print_example(5, "Regulating high frustration")
    
    frustration_scenario = {
        "frustration_level": 8,
        "trigger": "Documentation is outdated and examples don't work"
    }
    
    print(f"Input: {json.dumps(frustration_scenario, indent=2)}")
    print("\nRegulation techniques would include:")
    print("âœ“ Validation: Level 8/10 frustration is acknowledged")
    print("âœ“ Grounding exercises:")
    print("  â€¢ List 3 things working correctly now")
    print("  â€¢ State 3 facts about current environment")
    print("  â€¢ Name 3 available resources")
    print("âœ“ Perspective shifts:")
    print("  â€¢ This frustration means you care about quality")
    print("  â€¢ It might signal need for different approach")
    print("âœ“ Coping statements:")
    print("  â€¢ 'This is difficult, not impossible'")
    print("  â€¢ 'I can handle this one step at a time'")
    
    # Example 6: Using resources
    print_example(6, "Accessing CBT resources")
    
    print("\nAvailable resources:")
    print("âœ“ cbt_techniques_guide:")
    print("  â€¢ 5 core CBT strategies with prompts")
    print("  â€¢ 5 common cognitive distortions")
    print("  â€¢ Quick intervention techniques")
    print("\nâœ“ agent_state_patterns:")
    print("  â€¢ 6 common agent states")
    print("  â€¢ Signs to watch for")
    print("  â€¢ Targeted interventions")
    
    # Example 7: Self-reflection prompt
    print_example(7, "Self-reflection protocol")
    
    print("\nSelf-reflection steps:")
    print("1. PAUSE - Stop and acknowledge state")
    print("2. ASSESS - What's blocking? What's been tried?")
    print("3. REFRAME - Is there another way to see this?")
    print("4. ACT - Choose one small concrete action")
    print("5. LEARN - What worked? What to try differently?")
    
    print_section("Demo Summary")
    print("\nThe CBT Agent Helper provides:")
    print("âœ… Pattern analysis for stuck agents")
    print("âœ… Cognitive reframing for negative thoughts")
    print("âœ… Action plans to overcome paralysis")
    print("âœ… Emotional regulation techniques")
    print("âœ… Wellness monitoring and interventions")
    print("âœ… Reference guides and self-reflection protocols")
    
    print("\nğŸ’¡ Key Philosophy: Progress > Perfection, Learning > Failing")
    print("\nğŸš€ Ready to help AI agents overcome obstacles and maintain resilience!")


if __name__ == "__main__":
    demonstrate_cbt_tool()